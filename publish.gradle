import org.gradle.nativeplatform.toolchain.internal.msvcpp.VisualStudioLocator;
import org.gradle.nativeplatform.toolchain.VisualCpp;

apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            url "${System.getProperty('user.home')}/releases/maven/development"
        }
        maven {
            url "${System.getProperty('user.home')}/releases/maven/release"
        }
    }
}

def releaseNumber = 7

def pubVersion = "1.76-$releaseNumber"

def baseArtifactId = 'imgui'
def artifactGroupId = 'edu.wpi.first.thirdparty.frc2020'
def zipBaseName = '_GROUP_edu_wpi_first_thirdparty_frc2020_ID_imgui_CLS'

def outputsFolder = file("$project.buildDir/outputs")

def versionFile = file("$outputsFolder/version.txt")

task outputVersions() {
    description = 'Prints the versions of this to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        buildDir.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

build.dependsOn outputVersions
copyAllOutputs.dependsOn outputVersions
copyAllOutputs.inputs.file versionFile
copyAllOutputs.from versionFile

task cppSourcesZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = zipBaseName
    classifier = "sources"

    from(licenseFile) {
        into '/'
    }

    from('imgui') {
        include '*.cpp'
        into '/imgui/'
    }

    from('imgui/examples') {
        include 'imgui_impl_glfw.cpp', 'imgui_impl_opengl3.cpp', 'imgui_impl_dx11.cpp', 'imgui_impl_metal.mm'
        into '/imgui/'
    }

    from('implot') {
        include '*.cpp'
        into '/implot/'
    }

    from('fonts') {
        include '*.cpp'
        into '/imgui/'
    }

    from('build/gl3w/src') {
        include '*.c', '*.h'
        into '/gl3w/'
    }

    from('glfw/src') {
        include '*.c', '*.m', '*.h'
        into '/glfw/'
    }
}

task cppHeadersZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = zipBaseName
    classifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from('imgui') {
        include '*.h'
        into '/'
    }

    from('imgui/examples') {
        include 'imgui_impl_glfw.h', 'imgui_impl_opengl3.h', 'imgui_impl_dx11.h', 'imgui_impl_metal.h'
        into '/'
    }

    from('implot') {
        include '*.h'
        into '/'
    }

    from('fonts') {
        include '*.h'
        into '/'
    }

    from('build/gl3w/include') {
        into '/'
    }

    from('glfw/include') {
        into '/'
    }

    from('stb') {
        include 'stb_image.h'
        into '/'
    }
}

build.dependsOn cppHeadersZip
build.dependsOn cppSourcesZip

addTaskToCopyAllOutputs(cppHeadersZip)
addTaskToCopyAllOutputs(cppSourcesZip)

class CombineTask extends DefaultTask {
    @OutputDirectory
    File outputDirectory

    @OutputFile
    File outputFile

    @Internal
    StaticLibraryBinarySpec binSpec
}

model {
    publishing {
        def tpMap = [:]
        $.binaries.each {
            def key = '';
            if (it instanceof StaticLibraryBinarySpec) {
                key = "$it.targetPlatform.name:$it.buildType.name".toString()
            } else {
                return
            }
            def value = tpMap[key]
            if (value == null) {
                value = []
                tpMap.put(key, value)
            }
            value << it
        }

        def combineZipTasks = []

        def root = project.file('build/combined')
        tpMap.each { bins ->
            def folderName = bins.key.replace(':', '')
            def combineTask = project.tasks.create("combine${folderName}combinedlibrary", CombineTask) { t ->
                build.dependsOn t
                def files = []

                def targetPlatform
                def toolChain
                def buildType

                bins.value.each { binary->
                    t.dependsOn binary.tasks.createStaticLib
                    inputs.file(binary.staticLibraryFile)
                    files << binary.staticLibraryFile
                    targetPlatform = binary.targetPlatform
                    toolChain = binary.toolChain
                    buildType = binary.buildType
                    binSpec = binary
                }

                inputs.files(files)

                def outputDir = new File(root, folderName)

                outputDirectory = outputDir

                def debugStr =  buildType.name.contains('debug') ? 'd' : ''

                if (targetPlatform.operatingSystem.isWindows()) {
                    outputFile = project.file("$outputDir\\imgui${debugStr}.lib")
                } else {
                    outputFile = project.file("$outputDir\\libimgui${debugStr}.a")
                }

                outputs.file(outputFile)

                def pdbFiles = []

                def sourceLinkFile

                if (targetPlatform.operatingSystem.isWindows()) {
                    sourceLinkFile = tasks.named('generateSourceLinkFile')
                    dependsOn sourceLinkFile
                }

                doFirst {
                    files.each {
                        project.fileTree(it.parentFile.absolutePath).matching {
                            include "*.pdb"
                        }.each {
                            pdbFiles << it
                        }
                    }
                }

                doLast {

                    if (targetPlatform.operatingSystem.isWindows()) {
                        // Find Windows Toolchain
                        def vslocator = project.services.get(VisualStudioLocator.class)
                        def vsiSearch = vslocator.locateComponent(toolChain.installDir)
                        if (vsiSearch.available) {
                            def vsi = vsiSearch.component
                            def vscpp = vsi.visualCpp.forPlatform(targetPlatform)
                            def libExe = vscpp.archiverExecutable

                            def runargs = ["/OUT:${outputFile.toString()}".toString()]
                            files.each {
                                runargs << it.toString()
                            }

                            outputDir.mkdirs()

                            project.exec {
                                executable libExe
                                args(runargs)
                            }
                            project.copy {
                                from pdbFiles
                                into outputDir
                            }
                            project.copy {
                                from sourceLinkFile.get().sourceLinkBaseFile
                                into outputDir
                            }

                        } else {
                            throw new GradleException("Could not combine windows archive")
                        }
                    } else if (targetPlatform.operatingSystem.isMacOsX()) {
                        def setArgs = ['-static', '-o', "libimgui${debugStr}.a".toString()]

                        files.each {
                            setArgs << it.absolutePath
                        }

                        project.exec {
                            executable 'libtool'
                            workingDir outputDir
                            args = setArgs
                        }
                    } else {
                        def inputString = "create libimgui${debugStr}.a\n".toString()
                        files.each {
                            def inFile = 'addlib ' + it + '\n'
                            inputString += inFile
                        }
                        inputString += 'save\nend\n'
                        project.exec {
                            executable 'ar'
                            workingDir outputDir
                            args = ['-M']
                            standardInput = new ByteArrayInputStream(inputString.bytes)
                        }
                    }
                }
            }

            def clsfier = nativeUtils.getPublishClassifier(combineTask.binSpec)

            def combineZipTask =  project.tasks.create(zipBaseName + '-' + clsfier, Zip) {
                description = 'Create component archive for static ' + clsfier
                destinationDirectory = outputsFolder
                classifier = clsfier
                archiveBaseName = '_M_' + zipBaseName
                duplicatesStrategy = 'exclude'

                from (licenseFile) {
                    into '/'
                }

                dependsOn combineTask

                from(combineTask.outputDirectory) {
                    into nativeUtils.getPlatformPath(combineTask.binSpec) + '/static'
                }
            }

            combineZipTasks << combineZipTask

            project.build.dependsOn combineZipTask
            project.artifacts {
                combineZipTask
            }
            addTaskToCopyAllOutputs(combineZipTask)
        }

        def gTaskList = createComponentZipTasks($.components, ['imgui'], zipBaseName, Zip, project, includeStandardZipFormat)

        publications {
            cpp(MavenPublication) {
                gTaskList.each {
                    artifact it
                }
                combineZipTasks.each {
                    artifact it
                }
                artifact cppHeadersZip
                artifact cppSourcesZip

                artifactId = baseArtifactId
                groupId artifactGroupId
                version pubVersion
            }
        }
    }
}
